from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from keyboards.domains_kb import back_domains_kb, get_domains_menu_kb
from outboxes.domains import (
    confirm_bind_domain_func, 
    domains_menu, 
    get_active_users_for_reassign_domain,
    get_domain_management_menu, 
    handle_action_auto_distribute_domains, 
    handle_binding_domain_func,
    handle_confirm_buy_domains_func,
    handle_domain_input_to_dynadot_func, 
    handle_domain_input_to_namecheap_func, 
    reassign_domain_handler_func
)
from utils.schemas.domain_db import DomainProvider

router = Router()


class DomainNamecheapStates(StatesGroup):
    waiting_for_domains = State()
    confirm_buy_domains = State()
    waiting_action_by_domains = State()

class DomainDynadotStates(StatesGroup):
    waiting_for_domains = State()
    confirm_buy_domains = State()
    waiting_action_by_domains = State()


@router.callback_query(F.data.startswith("domain_"))
async def handle_single_domain_query(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    domain_id = callback.data.split("_")[-1]
    await get_domain_management_menu(callback, domain_id)


@router.callback_query(F.data.startswith("domains_page_"))
async def handle_domains_pagination(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        page = int(callback.data.split("_")[-1])
    except ValueError:
        page = 1
    print("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ", page)  # Debugging line to check the requested page
    await domains_menu(callback, page=page)


@router.callback_query(F.data.startswith("admin_domains_page_"))
async def handle_admin_domains_pagination(callback: CallbackQuery):
    parts = callback.data.split("_")

    target_user_id = int(parts[3])
    page = int(parts[4])

    keyboard = await get_domains_menu_kb(target_user_id, page=page, admin=True)

    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("domains"))
async def handle_domains_query(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await domains_menu(callback)


@router.callback_query(F.data.startswith("create_domain_namecheap"))
async def handle_create_domain_query(callback: CallbackQuery, state: FSMContext):
    msg = """
==============================
<b>üîé***–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤***üîç</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
==============================
–ü—Ä–∏–º–µ—Ä:
example.com
example.net
==============================
"""
    await state.set_state(DomainNamecheapStates.waiting_for_domains)
    await callback.message.answer(text=msg, reply_markup=await back_domains_kb())


@router.callback_query(F.data.startswith("create_domain_dynadot"))
async def handle_create_domain_query(callback: CallbackQuery, state: FSMContext):
    msg = """
==============================
<b>üîé***–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤***üîç</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
==============================
–ü—Ä–∏–º–µ—Ä:
example.com
example.net
==============================
"""
    await state.set_state(DomainDynadotStates.waiting_for_domains)
    await callback.message.answer(text=msg, reply_markup=await back_domains_kb())


@router.message(StateFilter(DomainNamecheapStates.waiting_for_domains))
async def handle_domain_input(message: Message, state: FSMContext):
    domains = message.text.strip().split("\n")
    domains = [domain.strip() for domain in domains if domain.strip()]
    if not domains:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–º–µ–Ω.")
        return
    print(domains)  # Debugging line to check the received domains
    await state.update_data(domains=domains)
    await handle_domain_input_to_namecheap_func(message, state)
    await state.set_state(DomainNamecheapStates.confirm_buy_domains)


@router.message(StateFilter(DomainDynadotStates.waiting_for_domains))
async def handle_domain_input(message: Message, state: FSMContext):
    domains = message.text.strip().split("\n")
    domains = [domain.strip() for domain in domains if domain.strip()]
    if not domains:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–º–µ–Ω.")
        return
    print(domains)  # Debugging line to check the received domains
    await state.update_data(domains=domains)
    await handle_domain_input_to_dynadot_func(message, state)
    await state.set_state(DomainDynadotStates.confirm_buy_domains)


@router.callback_query(StateFilter(DomainNamecheapStates.confirm_buy_domains))
async def handle_confirm_buy_domains(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –¥–æ–º–µ–Ω–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
    state_data = await state.get_data()
    domains = state_data.get("domains", [])
    if not domains:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    await handle_confirm_buy_domains_func(callback, state, DomainProvider.NAMECHEAP)
    await state.set_state(DomainNamecheapStates.waiting_action_by_domains)

@router.callback_query(StateFilter(DomainDynadotStates.confirm_buy_domains))
async def handle_confirm_buy_domains(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –¥–æ–º–µ–Ω–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
    state_data = await state.get_data()
    domains = state_data.get("domains", [])
    if not domains:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    
    await handle_confirm_buy_domains_func(callback, state, DomainProvider.DYNADOT)
    #–°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –ù–µ–π–º—á–∏–ø, —á—Ç–æ–± –Ω–µ —Ä–∞–∑–¥–µ–ª—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    await state.set_state(DomainNamecheapStates.waiting_action_by_domains) 


@router.callback_query(StateFilter(DomainNamecheapStates.waiting_action_by_domains))
async def handle_action_by_domains(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith("auto_distribute_domains"):
        await callback.message.answer('–ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤...')
        await handle_action_auto_distribute_domains(callback, state)


@router.callback_query(F.data.startswith("binding_"))
async def handle_binding_domain(callback: CallbackQuery):
    domain_id = callback.data.split("_")[-1]
    await handle_binding_domain_func(callback, domain_id)


@router.callback_query(F.data.startswith("bind_domain_"))
async def confirm_bind_domain(callback: CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) != 4:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –¥–æ–º–µ–Ω–∞.")
        return
    await callback.message.answer('–ü—Ä–∏–≤—è–∑—ã–≤–∞—é –¥–æ–º–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
    domain_id = parts[2]
    server_id = parts[3]
    await confirm_bind_domain_func(callback, domain_id, server_id)


@router.callback_query(F.data.startswith("reassign_owner_"))
async def handle_reassign_owner(callback: CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    domain_id = parts[2]
    await get_active_users_for_reassign_domain(callback, domain_id)


@router.callback_query(F.data.startswith("reassign_"))
async def reassign_domain_handler(callback: CallbackQuery):
    # callback.data: 'reassign_{domain_id}_to_{user_id}'
    parts = callback.data.split("_")
    domain_id = parts[1]
    user_id = parts[3]
    await reassign_domain_handler_func(callback, domain_id, user_id)
